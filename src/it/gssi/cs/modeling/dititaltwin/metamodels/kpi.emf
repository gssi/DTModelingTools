@namespace(uri="http://cs.gssi.it/kpi", prefix="kpi")
package kpi_model;

import "http://cs.gssi.it/digitaltwinDL";
class KpiModel {

  val Dimension[*]#kpimodel dimensions;
  attr String author;
  attr Date evaldate;
}

class Dimension {

  val Category[*]#dimension categories;
  ref KpiModel[1]#dimensions kpimodel;
  attr String name;
}

class Category {
   val Kpi[*]#category kpis;
   val Parameter[*] parameters;
   ref Dimension[1]#categories dimension;
   attr String name;

}
abstract class IDElement{
	attr String ID;
	attr String name;
}
class Kpi extends IDElement{
  
  attr String description;
  ref digitaltwin.DTClass subjecttype;
  ref EObject subject;
  ref Category[1]#kpis category;
  val Value[1]#kpi value;
  attr String unit;
}

class Value {
 
  ref Kpi[1]#value kpi;
  val ValueType[1]#value valuetype;
}

class Parameter {
  attr String name;

}

abstract class ValueType extends IDElement{
	
	ref Value[?]#valuetype value;

}

abstract class CalculatedValue extends ValueType{
	
}

abstract class SingleNonStaticValue extends CalculatedValue{
	ref Parameter[1] parameter;
}

abstract class Real{
  attr double min;
  attr double max;
  attr double actualizedvalue;
  attr double targetvalue;
}
abstract class Bool{
	attr boolean actualizedvalue;
	attr boolean targetvalue = true;
}
abstract class Int{
  attr int min;
  attr int max;
  attr int actualizedvalue;
  attr int targetvalue;
}
abstract class String_{
	
}
class StaticRealValue extends CalculatedValue, Real {
  
  
}

class StaticBoolValue extends CalculatedValue, Bool {
 
}

class StaticIntegerValue extends CalculatedValue, Int {
 
}

class BoolValue extends SingleNonStaticValue, Bool {
  
}

class RealValue extends SingleNonStaticValue, Real {
  
}

class IntegerValue extends SingleNonStaticValue, Int {
  
}
class StringValue extends SingleNonStaticValue, String_ {
  
}

class RangedValue extends ValueType {
  attr String actualizedvalue;
  val Range[*] ranges;
  attr String targetvalue;
}

class Range {
attr String name;
  attr double min;
  attr double max;
  
}

 abstract class AggregatedValue extends CalculatedValue {
  
  attr Operation[1] oper;
  val ValueType[*] values;
  
}

class AggregatedBoolValue extends AggregatedValue, Bool {
  
}

class AggregatedRealValue extends AggregatedValue, Real {
  
}

class AggregatedIntegerValue extends AggregatedValue, Int {
 
}
class AggregatedStringValue extends AggregatedValue , String_{

}

class AggregatedRangedValue extends AggregatedValue {
  attr String actualizedvalue;
  val Range[*] ranges;
   attr String targetvalue;
}

enum Operation{
	GET=0;
	SUM=1;
	DIFF=2;
	AVG=3;
	MIN=4;
	MAX=5;
	DIV=6;
	AND=7;
	OR=8;
	XOR=9;
	MULT=10;
	GT=11;
	LT=12;
	IN=13;
	CEN=14;
}





