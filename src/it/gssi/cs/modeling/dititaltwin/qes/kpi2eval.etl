import "kpi-providers.eol";

pre{

var javaDate = new Native("java.util.Date");
var instant = Native("java.time.Instant");
var duration = Native("java.time.Duration");

var start = instant.now();
var emfTool : new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreutil = emfTool.ecoreUtil;
//var equalityhelper : new Native("org.eclipse.emf.ecore.util.EcoreUtil.EqualityHelper");
var equalityhelper : new Native("org.eclipse.emf.ecore.util.EcoreUtil$EqualityHelper");

//var equalityhelper = new Native("org.eclipse.emf.ecore.util.EcoreUtil.EqualityHelper"); 

//var subject: subjectmodel!EObject;
//var subject=subjectmodel!EObject.all.select(o|o.eClass.eAnnotations.select(ea|ea.source="DT").size()>0).first;
//subject.println();
//var subjectname = subject.eGet(subject.eClass.eStructuralFeatures.selectOne(sf|sf.eType.name="EString")).toString();
//("Evaluating a: "+subject.eClass.name+"...").println();

//("Required: "+kpimodel!Kpi.all.size()+" kpis").println();
/*
var dtobjects = subjectmodel!EObject.all.select(o|o.eClass.eAnnotations.select(ea|ea.source="DT").size()>0);

var data = new Sequence;
for (o in dtobjects) { 

	var dtfeatures= o.eClass.eStructuralFeatures.select(f|f.eAnnotations.select(ea|ea.source="DT").size()>0);
	for (dtf in dtfeatures.select(dt|dt.eAnnotations.details.flatten().select(ann|ann.key="type" and ann.value="DTProperty").size()>0)) { 
		
		data.addAll(o.eGet(dtf));
	
	}
} */
//data.println();

var mainkpimodel = createEvalKpiModel();

}

operation createEvalKpiModel(): TargetKpi!KpiModel{
var evaluated  =  new TargetKpi!KpiModel();
	evaluated.author = kpimodel!KpiModel.all.first.author;
	evaluated.evaldate = javaDate;
	
	return evaluated;
} 


rule Dim2Dim
transform s: kpimodel!Dimension
to t: TargetKpi!Dimension {

t.name = s.name;
t.kpimodel = mainkpimodel;

}


rule Cat2Cat
transform s: kpimodel!Category
to t: TargetKpi!Category {

t.parameters ::= s.parameters;
t.name = s.name;
mainkpimodel.dimensions.selectOne(d|d.name==s.dimension.name).categories.add(t);

}

rule Parameters
transform s: kpimodel!Parameter
to t: TargetKpi!Parameter{
t.name = s.name;

}

rule Kpi
transform s: SubjectKpi
to t: TargetKpi!Kpi, val: TargetKpi!Value {
//subject = s.subject; //this line is setting the subject of the kpi 
//("Switching/Setting subject: "+subject.name+ " for kpi "+s.kpi.name).println();
t.name = s.kpi.name;
t.ID = ecoreutil.getIdentification(s.kpi);
mainkpimodel.dimensions.categories.flatten().selectOne(c|c.name=s.kpi.category.name and c.dimension.name=s.kpi.category.dimension.name).kpis.add(t);
t.description = s.kpi.description;
t.subject = s.subject;
t.unit = s.kpi.unit;
//val.valuetype  = s.value.valuetype.getValueType(s.subject);
val.valuetype ::= s.kpi.value.valuetype;
t.value = val;
}

@abstract 
rule  Valuetype
transform valuetype: kpimodel!ValueType
to eval: TargetKpi!ValueType{
eval.value ::= valuetype.value;
eval.kpi ::= valuetype.kpi;
}

/*operation kpimodel!Kpi createValue( subject: subjectmodel!EObject): TargetKpi!Value{

var eval = new TargetKpi!Value();
eval.valuetype = self.value.valuetype.createValueType(subject);

return eval;
} */

rule RealValue
transform s: ValueTypeInKpi
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!RealValue)

eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject).value.valuetype=eval;
}


rule RealValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!RealValue)

eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject).value.valuetype=eval;
}


rule AggregatedRealValue
transform s: ValueTypeInKpi
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRealValue)

eval.oper = s.valuetype.oper.targetOp();
eval.values = s.valuetype.values;
eval.actualizedvalue =  s.valuetype.get().asReal();
eval.targetvalue = s.valuetype.targetvalue;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject).value.valuetype=eval;
}


rule AggregatedRealValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRealValue)

eval.oper = s.valuetype.oper.targetOp();
eval.values= s.valuetype.values;
eval.actualizedvalue =  s.valuetype.get().asReal();
eval.targetvalue = s.valuetype.targetvalue;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject).value.valuetype=eval;
}
/*





rule StaticRealValue
transform single: kpimodel!StaticRealValue
to eval: TargetKpi!StaticRealValue{
	eval.actualizedvalue = single.get();
	eval.targetvalue = single.targetvalue;
}

rule StaticBoolValue
transform single: kpimodel!StaticBoolValue
to eval: TargetKpi!StaticBoolValue{
	eval.actualizedvalue = single.get();
	eval.targetvalue = single.targetvalue;
}

rule StaticIntegerValue
transform single: kpimodel!StaticIntegerValue
to eval: TargetKpi!StaticIntegerValue{
	eval.actualizedvalue = single.get();
	eval.targetvalue = single.targetvalue;
	
}



rule BoolValue
transform single: kpimodel!BoolValue
to eval: TargetKpi!BoolValue{
eval.actualizedvalue = single.get(subject);
eval.parameter ::= single.parameter;
eval.targetvalue = single.targetvalue.ifUndefined(false);
}


rule StringValue
transform single: kpimodel!StringValue
to eval: TargetKpi!StringValue{
eval.actualizedvalue = single.get(subject);
eval.parameter ::= single.parameter;	
eval.targetvalue = single.targetvalue.ifUndefined("");
}

rule RangedValue
transform range: kpimodel!RangedValue
to eval: TargetKpi!RangedValue{
eval.ranges::=range.ranges;
eval.targetvalue = range.targetvalue;
}


rule Range
transform range: kpimodel!Range
to eval: TargetKpi!Range{
eval.name=range.name;
eval.min=range.min;
eval.max=range.max;
}

rule AggregatedRealValue
transform aggr: kpimodel!AggregatedRealValue
to eval: TargetKpi!AggregatedRealValue{
eval.oper = aggr.oper.targetOp();
eval.values::= aggr.values;
eval.actualizedvalue =  aggr.get().asReal();
eval.targetvalue = aggr.targetvalue;
}

rule AggregatedBoolValue
transform aggr: kpimodel!AggregatedBoolValue
to eval: TargetKpi!AggregatedBoolValue{
eval.oper = aggr.oper.targetOp();
eval.values::= aggr.values;
eval.actualizedvalue = aggr.get();
eval.targetvalue = aggr.targetvalue;
}

rule AggregatedIntegerValue
transform aggr: kpimodel!AggregatedIntegerValue
to eval: TargetKpi!AggregatedIntegerValue{
eval.oper = aggr.oper.targetOp();
eval.values::= aggr.values;
eval.actualizedvalue = aggr.get();
eval.targetvalue = aggr.targetvalue;
}


rule AggregatedStringValue
transform aggr: kpimodel!AggregatedStringValue
to eval: TargetKpi!AggregatedStringValue{
eval.oper = aggr.oper.targetOp();
eval.values::= aggr.values;
eval.actualizedvalue = aggr.get();
eval.targetvalue = aggr.targetvalue;
}


rule AggregatedRangedValue
transform aggr: kpimodel!AggregatedRangedValue
to eval: TargetKpi!AggregatedRangedValue{
eval.ranges::= aggr.ranges;
eval.values::=aggr.values;
eval.actualizedvalue = aggr.get();
eval.targetvalue = aggr.targetvalue;
}
*/
operation List<TargetKpi!Category>  removeEmptyCat(){

for (cat in self) { 

	if(cat.kpis.size()==0) {
	
	cat.dimension.categories.remove(cat);
	
	}
}	
}

operation List<TargetKpi!Dimension>  removeEmptyDim(){

for (dim in self) { 

	if(dim.categories.size()==0) {
	
	dim.kpimodel.dimensions.remove(dim);

	}
}
}

post{
TargetKpi!Category.all.removeEmptyCat();
TargetKpi!Dimension.all.removeEmptyDim();

"Evaluation complete.".println();
var end = instant.now();
var elapsedTime : Real = duration.between(start,end).toMillis();
("Runtime evaluation took "+elapsedTime+" ms").println();
}

