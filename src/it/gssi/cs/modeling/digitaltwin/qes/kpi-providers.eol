
operation subjectmodel!EObject getSubjectObjects(): List<EObject>{
var datalist: List;
var it: List = self.eAllContents();

while(it.hasNext())
{
	var eo = it.next();
	datalist.add(eo);	
	// Do something
}

var dtobjects = datalist.select(o|o.eClass.eAnnotations.select(ea|ea.source="DT").size()>0);

var data = new Sequence;
for (o in dtobjects) { 

	var dtfeatures= o.eClass.eStructuralFeatures.select(f|f.eAnnotations.select(ea|ea.source="DT").size()>0);
	for (dtf in dtfeatures.select(dt|dt.eAnnotations.details.flatten().select(ann|ann.key="type" and ann.value="DTProperty").size()>0)) { 
		
		data.addAll(o.eGet(dtf));
	
	}
}

return data; 
}


operation Any targetOp(): Any{
switch(self){
case kpimodel!Operation#GET: return TargetKpi!Operation#GET;
case kpimodel!Operation#SUM: return TargetKpi!Operation#SUM;
case kpimodel!Operation#DIFF: return TargetKpi!Operation#DIFF;
case kpimodel!Operation#AVG: return TargetKpi!Operation#AVG;
case kpimodel!Operation#MIN: return TargetKpi!Operation#MIN;
case kpimodel!Operation#MAX: return TargetKpi!Operation#MAX;
case kpimodel!Operation#DIV: return TargetKpi!Operation#DIV;
case kpimodel!Operation#MULT: return TargetKpi!Operation#MULT;
case kpimodel!Operation#GT: return TargetKpi!Operation#GT;
case kpimodel!Operation#LT: return TargetKpi!Operation#LT;
case kpimodel!Operation#CEN: return TargetKpi!Operation#CEN;
case kpimodel!Operation#IN: return TargetKpi!Operation#IN;
default : "No operation provided ".println(); 
}

}

operation Real getRounded():Real{
var decimal = new Native("java.text.DecimalFormat");
decimal.applyPattern("###.###");
return decimal.format(self).asReal();
//return self.asReal();
}

operation kpimodel!StaticRealValue get(subject: subjectmodel!EObject): Any{
	return self.actualizedvalue;
}

operation kpimodel!StaticBoolValue get(subject: subjectmodel!EObject): Any{
	return self.actualizedvalue;
}

operation kpimodel!StaticIntegerValue get(subject: subjectmodel!EObject): Any{
	return self.actualizedvalue;
}

operation Any getValue(){

	return self.value;
}

operation kpimodel!RealValue get(subject: subjectmodel!EObject): Real{
var data = subject.getSubjectObjects();

if(data.exists(d|d.name.toLowerCase() == self.parameter.name.toLowerCase())){ 

var result = data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase()).getValue().asReal();
	return result;
}else if(self.parameter.isTypeOf(TargetKpi!KpiParameter)){
	//self.parameter.kpi.value.valuetype.actualizedvalue.println();
}else{
("no parameter: "+self.parameter.name+" detected from DT in subject "+subject.eClass.name+" "+subject.name).println();
}
}

operation kpimodel!BoolValue get(subject: subjectmodel!EObject): Boolean{
var data = subject.getSubjectObjects();
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).getValue().asBoolean();
}
}

operation kpimodel!IntegerValue get(subject: subjectmodel!EObject): Integer{

var data = subject.getSubjectObjects();
if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).getValue().asInteger();
}
}

operation kpimodel!StringValue get(subject: subjectmodel!EObject): String{
var data = subject.getSubjectObjects();

if(data.exists(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name)){ 
return data.selectOne(d|d.name.toLowerCase()==self.parameter.name.toLowerCase() and d.eClass.name==self.eClass.name).getValue().asString();
}
}


operation TargetKpi!AggregatedRealValue get() {
var result = 0.0;
result = self.values.collect(e|e.actualizedvalue).getop(self.oper);
return result.asDouble();
}

operation TargetKpi!AggregatedIntegerValue get(): Any{
var result = 0.0;
result = self.values.collect(e|e.actualizedvalue).getop(self.oper);
return result.asInteger();
}

operation TargetKpi!AggregatedBoolValue get(): Any{
var result = 0.0;
result = self.values.collect(e|e.actualizedvalue).getop(self.oper);
return result.asBoolean();
}

operation TargetKpi!AggregatedRangedValue get(): Any{
var value = self.values.collect(e|e.actualizedvalue).getop(self.oper);
if(self.ranges.selectOne(r|r.min <= value and r.max >= value).isDefined()) {
	return self.ranges.selectOne(r|r.min <= value and r.max >= value).name;
}else{
	return "undefined range";
}
	
}

operation Real convert(): Real{
return self;
}
operation Boolean convert(): Real{
return self ? 1:0;
}


operation Any getop(op: Any): Any{

//(op+":"+self).println();
switch (op) {
case kpimodel!Operation#GET: return self.first;
case kpimodel!Operation#SUM: return self.sum();
case kpimodel!Operation#DIFF: return (self.get(0)>self.get(1))?self.get(0)-self.get(1):self.get(1)-self.get(0);
case kpimodel!Operation#AVG: return (self.size()>0)?self.sum()/self.size():0;
case kpimodel!Operation#MIN: return self.min();
case kpimodel!Operation#MAX: return self.max();
case kpimodel!Operation#DIV: return (self.get(0).ifUndefined(0)/self.get(1).ifUndefined(0));
case kpimodel!Operation#MULT: return (self.size()==2)?self.get(0).convert() *self.get(1).convert():0;
case kpimodel!Operation#IN: return (self.size()==3 and (self.get(0) < self.get(1) and self.get(1) < self.get(2))?1:0);
case kpimodel!Operation#GT: return (self.get(0)>=self.get(1));
case kpimodel!Operation#LT: return self.get(0)<=self.get(1);
case kpimodel!Operation#CEN: if(self.get(0) >= 100000) return self.get(0) / 100000; else return self.get(0) / self.get(0);
default : "No operation provided ".println(); }

}




