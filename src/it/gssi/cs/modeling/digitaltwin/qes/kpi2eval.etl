import "kpi-providers.eol";

pre{

var javaDate = new Native("java.util.Date");
var instant = Native("java.time.Instant");
var duration = Native("java.time.Duration");

var start = instant.now();
var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreutil = emfTool.ecoreUtil;

//var equalityhelper : new Native("org.eclipse.emf.ecore.util.EcoreUtil$EqualityHelper");


var mainkpimodel = createEvalKpiModel();

}

operation createEvalKpiModel(): TargetKpi!KpiModel{
var evaluated  =  new TargetKpi!KpiModel();
	evaluated.author = kpimodel!KpiModel.all.first.author;
	evaluated.evaldate = javaDate;
	
	return evaluated;
} 


rule Dim2Dim
transform s: kpimodel!Dimension
to t: TargetKpi!Dimension {

t.name = s.name;
t.kpimodel = mainkpimodel;

}


rule Cat2Cat
transform s: kpimodel!Category
to t: TargetKpi!Category {

//t.parameters = s.parameters;
t.name = s.name;
mainkpimodel.dimensions.selectOne(d|d.name==s.dimension.name).categories.add(t);

}

rule Parameters
transform s: kpimodel!Parameter
to t: TargetKpi!Parameter{
t.name = s.name;
mainkpimodel.dimensions.categories.flatten().selectOne(c|c.name=s.category.name).parameters.add(t);

}

rule Kpi
transform s: SubjectKpi
to t: TargetKpi!Kpi, val: TargetKpi!Value {
//subject = s.subject; //this line is setting the subject of the kpi 
//("Switching/Setting subject: "+subject.name+ " for kpi "+s.kpi.name).println();
t.name = s.kpi.name;
t.ID = ecoreutil.getIdentification(s.kpi);
mainkpimodel.dimensions.categories.flatten().selectOne(c|c.name=s.kpi.category.name and c.dimension.name=s.kpi.category.dimension.name).kpis.add(t);
t.description = s.kpi.description;
t.subject = s.subject;
t.unit = s.kpi.unit;

t.value = val;
}

rule AggregatedRealValue 
transform s: ValueTypeInKpi
to eval: TargetKpi!AggregatedRealValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRealValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.oper = s.valuetype.oper.targetOp();

eval.targetvalue = s.valuetype.targetvalue;
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject and  ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype = eval;

}


rule AggregatedRealValueInAggregated 
transform s: ValueTypeInAggregated
to eval: TargetKpi!AggregatedRealValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRealValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject and ecoreutil.isAncestor(mainkpimodel,k));
eval.targetvalue = s.valuetype.targetvalue;
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.container) and ecoreutil.isAncestor(subjectkpi,el)  ).values.add(eval);

}

rule AggregatedBoolValue 
transform s: ValueTypeInKpi
to eval: TargetKpi!AggregatedBoolValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedBoolValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype = eval;

}

rule AggregatedBoolValueInAggregated 
transform s: ValueTypeInAggregated
to eval: TargetKpi!AggregatedBoolValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedBoolValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject);
eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.container) and ecoreutil.isAncestor(subjectkpi,el)  and ecoreutil.isAncestor(mainkpimodel,el)).values.add(eval);

}

rule AggregatedIntegerValue 
transform s: ValueTypeInKpi
to eval: TargetKpi!AggregatedIntegerValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedIntegerValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

eval.targetvalue = s.valuetype.targetvalue;
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype = eval;

}

rule AggregatedIntegerValueInAggregated 
transform s: ValueTypeInAggregated
to eval: TargetKpi!AggregatedIntegerValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedIntegerValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
eval.targetvalue = s.valuetype.targetvalue;
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.container) and ecoreutil.isAncestor(subjectkpi,el)).values.add(eval);

}

rule AggregatedStringValue 
transform s: ValueTypeInKpi
to eval: TargetKpi!AggregatedStringValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedStringValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();
eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype = eval;

}

rule AggregatedStringValueInAggregated 
transform s: ValueTypeInAggregated
to eval: TargetKpi!AggregatedStringValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedStringValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;
eval.oper = s.valuetype.oper.targetOp();

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.container) and ecoreutil.isAncestor(subjectkpi,el)  and ecoreutil.isAncestor(mainkpimodel,el)).values.add(eval);

}

rule AggregatedRangedValue 
transform s: ValueTypeInKpi
to eval: TargetKpi!AggregatedRangedValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRangedValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;

eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype = eval;

}

rule AggregatedRangedValueInAggregated 
transform s: ValueTypeInAggregated
to eval: TargetKpi!AggregatedRangedValue {
guard: s.valuetype.isTypeOf(kpimodel!AggregatedRangedValue)

eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.name = s.valuetype.oper.name;

var subjectkpi = TargetKpi!Kpi.all.selectOne(k|k.name==s.kpi.name and k.subject==s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
eval.targetvalue = s.valuetype.targetvalue;

TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.container) and ecoreutil.isAncestor(subjectkpi,el) and ecoreutil.isAncestor(mainkpimodel,el)).values.add(eval);

}


rule StaticRealValue
transform s: ValueTypeInKpi
to eval: TargetKpi!StaticRealValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticRealValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.min = s.valuetype.min;
	eval.max = s.valuetype.max;
	eval.targetvalue = s.valuetype.targetvalue;
	TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype=eval;
}

rule StaticRealValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!StaticRealValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticRealValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.min = s.valuetype.min;
	eval.max = s.valuetype.max;
	eval.targetvalue = s.valuetype.targetvalue;
	var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0 );
	candidatecontainer.values.add(eval);
	candidatecontainer.values = candidatecontainer.reorder(s.container);
}

rule StaticBoolValue
transform s: ValueTypeInKpi
to eval: TargetKpi!StaticBoolValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticBoolValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.targetvalue = s.valuetype.targetvalue;
	TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype=eval;
}

rule StaticBoolValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!StaticBoolValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticBoolValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.targetvalue = s.valuetype.targetvalue;
	var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
	candidatecontainer.values.add(eval);
	candidatecontainer.values = candidatecontainer.reorder(s.container);
}

rule StaticIntegerValue
transform s: ValueTypeInKpi
to eval: TargetKpi!StaticIntegerValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticIntegerValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.min = s.valuetype.min;
	eval.max = s.valuetype.max;
	eval.targetvalue = s.valuetype.targetvalue;
	TargetKpi!IDElement.all.selectOne(el|el.ID=ecoreutil.getIdentification(s.kpi) and el.subject=s.subject  and ecoreutil.isAncestor(mainkpimodel,el)).value.valuetype=eval;
}

rule StaticIntegerValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!StaticIntegerValue{
guard: s.valuetype.isTypeOf(kpimodel!StaticIntegerValue)
	eval.ID = ecoreutil.getIdentification(s.valuetype);
	eval.min = s.valuetype.min;
	eval.max = s.valuetype.max;
	eval.actualizedvalue = s.valuetype.get(s.subject);
	eval.targetvalue = s.valuetype.targetvalue;
	var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
	candidatecontainer.values.add(eval);
	candidatecontainer.values = candidatecontainer.reorder(s.container);
}

rule RealValueInKPI
transform s: ValueTypeInKpi
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!RealValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);
var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainers = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.kpi) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		candidatecontainers.value.valuetype =eval;
		
}


rule RealValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!RealValue{
guard: s.valuetype.isTypeOf(kpimodel!RealValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.min = s.valuetype.min;
eval.max = s.valuetype.max;
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		 s.container.values.indexOf(s.valuetype);
		
		candidatecontainer.values.add(eval);
		candidatecontainer.values = candidatecontainer.reorder(s.container);
	
}

rule BoolValueInKPI
transform s: ValueTypeInKpi
to eval: TargetKpi!BoolValue{
guard: s.valuetype.isTypeOf(kpimodel!BoolValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);
var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainers = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.kpi) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		candidatecontainers.value.valuetype =eval;
		
}

rule BoolValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!BoolValue{
guard: s.valuetype.isTypeOf(kpimodel!BoolValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		 s.container.values.indexOf(s.valuetype);
		
		candidatecontainer.values.add(eval);
		candidatecontainer.values = candidatecontainer.reorder(s.container);
	
}


rule StringValueInKPI
transform s: ValueTypeInKpi
to eval: TargetKpi!StringValue{
guard: s.valuetype.isTypeOf(kpimodel!StringValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined(0);
var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainers = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.kpi) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		candidatecontainers.value.valuetype =eval;
		
}

rule StringValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!StringValue{
guard: s.valuetype.isTypeOf(kpimodel!StringValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);
eval.actualizedvalue = s.valuetype.get(s.subject);
eval.parameter = s.valuetype.parameter;
eval.targetvalue = s.valuetype.targetvalue.ifUndefined("");

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		 s.container.values.indexOf(s.valuetype);
		
		candidatecontainer.values.add(eval);
		candidatecontainer.values = candidatecontainer.reorder(s.container);
	
}

rule RangedValueInKpi
transform s: ValueTypeInKpi
to eval: TargetKpi!RangedValue{
guard: s.valuetype.isTypeOf(kpimodel!RangedValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);

eval.targetvalue = s.valuetype.targetvalue.ifUndefined("");

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainers = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.kpi) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		candidatecontainers.value.valuetype =eval;
}

rule RangedValueInAggregated
transform s: ValueTypeInAggregated
to eval: TargetKpi!RangedValue{
guard: s.valuetype.isTypeOf(kpimodel!RangedValue)
eval.ID = ecoreutil.getIdentification(s.valuetype);

eval.targetvalue = s.valuetype.targetvalue.ifUndefined("");

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		 s.container.values.indexOf(s.valuetype);
		
		candidatecontainer.values.add(eval);
		candidatecontainer.values = candidatecontainer.reorder(s.container);
	
}

rule Range
transform s: PatternRange
to eval: TargetKpi!Range{
guard: s.range.isTypeOf(kpimodel!Range)
eval.name = s.range.name;
eval.min = s.range.min;
eval.max = s.range.max;

var subjectkpis = TargetKpi!Kpi.all.select(k|k.subject == s.subject and k.name==s.kpi.name  and ecoreutil.isAncestor(mainkpimodel,k));
	
	var candidatecontainer = TargetKpi!IDElement.all.selectOne(el| el.ID = ecoreutil.getIdentification(s.container) and subjectkpis.select(k|ecoreutil.isAncestor(k,el)).size()>0);
		 //s.container.ranges.indexOf(s.range);
		
		candidatecontainer.ranges.add(eval);
		//candidatecontainer.values = candidatecontainer.reorder(s.container);
	
}

operation TargetKpi!IDElement reorder(origincontainer: kpimodel!IDElement){
return self.values.sortBy(v|origincontainer.values.indexOf(kpimodel!ValueType.all.selectOne(vt|ecoreutil.getIdentification(vt) == v.ID)));
}

operation List<TargetKpi!Category>  removeEmptyCat(){

for (cat in self) { 

	if(cat.kpis.size()==0) {
	
	cat.dimension.categories.remove(cat);
	
	}
}	
}

operation List<TargetKpi!Dimension>  removeEmptyDim(){

for (dim in self) { 

	if(dim.categories.size()==0) {
	
	dim.kpimodel.dimensions.remove(dim);

	}
}
}

operation Sequence<TargetKpi!Kpi> calculateAggregatedValues(){

 for (value in self.value) { 

	if(value.valuetype.isKindOf(TargetKpi!AggregatedValue)) value.valuetype.calculateAggregatedValues();
	}

}

operation TargetKpi!AggregatedValue calculateAggregatedValues(){
//DFS visit
if(self.values.exists(v|v.isKindOf(TargetKpi!AggregatedValue))){
	for (sv in self.values.select(v|v.isKindOf(TargetKpi!AggregatedValue))) { 
		sv.calculateAggregatedValues();
	}
}

self.actualizedvalue = self.get();
}



post{

TargetKpi!Kpi.all.calculateAggregatedValues();
 
TargetKpi!Category.all.removeEmptyCat();
TargetKpi!Dimension.all.removeEmptyDim();

"Evaluation complete.".println();
var end = instant.now();
var elapsedTime : Real = duration.between(start,end).toMillis();
("Runtime evaluation took "+elapsedTime+" ms").println();
}

