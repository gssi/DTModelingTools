pre{
	var mainpackage;
}

rule DTMega
transform s: digitaltwin!DTMegaModel
to t: MM!EPackage{
	t.name = s.name;
	t.eSubpackages ::= s.dtmodels;
	mainpackage=t;
}


rule DTModel2Package
transform s: digitaltwin!DTModel
to t: MM!EPackage{
	t.name = s.name;
	t.nsuri = s.name;
	t.nsprefix = s.name;
	t.eClassifiers ::= s.classes;
}

rule DTClass
transform s: digitaltwin!DTClass
	to t: MM!EClass{
	t.name=s.name;
	t.eAnnotations.add(s.createAnnotation());
	
	
}

rule Conceptual
transform s: digitaltwin!ConceptualClass
	to t: MM!EClass{
	t.name=s.name;
	
	
}

operation digitaltwin!DTClass createAnnotation(): MM!EAnnotation{
var annotation = new MM!EAnnotation();
annotation.source="DT";
annotation.details.put("type","DTClass");

return annotation;
}

rule  DTAttr2Attr
transform s: digitaltwin!Attribute
to t: MM!EAttribute {
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	t.name=s.name;
	t.eType= s.type.convert();
}

rule DTProperty2Attribute 
transform s: digitaltwin!DTAttribute
to t: MM!EReference, c: MM!EClass, ann:MM!EAnnotation {
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	t.name=s.name;
	t.lowerBound = 0;
	t.upperBound = 1;
	t.eType=c;
	
	ann.source="DT";
	ann.details.put("type","DTProperty");
	
	t.eAnnotations.add(ann);
	t.containment=true;
	c.name=s.name.firstToUpperCase();
	s.dtclass.dtmodel.equivalent().eClassifiers.add(c);
	var parname = new MM!EAttribute;
	parname.name = "name";
	parname.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
	
	
	var value = new MM!EAttribute;
	value.name = "value";
	value.eType= s.type.convert();
	
	
	c.eStructuralFeatures.add(value);
	c.eStructuralFeatures.add(parname);
	
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	
	
}

rule Ref2EReference
transform s: digitaltwin!Reference
to t: MM!EReference{

	t.name=s.name;
	t.lowerBound = s.lowerb;
	t.upperBound = s.upperb;
	t.eType=s.type.equivalent();

	t.containment = false;

	s.dtclass.equivalent().eStructuralFeatures.add(t);
	
}

rule ContainmentRef2EReference
transform s: digitaltwin!ContainmentReference
to t: MM!EReference{

	t.name=s.name;
	t.lowerBound = s.lowerb;
	t.upperBound = s.upperb;
	t.eType=s.type.equivalent();
	
	
	t.containment = s.isContainment();
	
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	
	
}


rule DTProperty2ContainmentReference 
transform s: digitaltwin!DTContainmentReference
to t: MM!EReference, ann:MM!EAnnotation{

	t.name=s.name;
	t.lowerBound = s.lowerb;
	t.upperBound = s.upperb;
	t.eType ::= s.type;
	
	ann.source="DT";
	ann.details.put("type","DTProperty");
	
	t.eAnnotations.add(ann);
	
	t.containment=true;
	
	
	var parname = new MM!EAttribute;
	parname.name = "name";
	parname.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
	
	var unit = new MM!EAttribute;
	unit.name = "unit";
	unit.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
	
	var value = new MM!EAttribute;
	value.name = "value";
	value.eType= Ecore!EDataType.all.selectOne(dt|dt.name = 'EDouble');
	
	var interval = new MM!EAttribute;
	interval.name = "interval";
	interval.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EInt');
	
	s.type.equivalent().eStructuralFeatures.add(unit);
	s.type.equivalent().eStructuralFeatures.add(value);
	s.type.equivalent().eStructuralFeatures.add(interval);
	s.type.equivalent().eStructuralFeatures.add(parname);
	
	
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	
	
}

rule DTProperty2Reference
transform s: digitaltwin!DTReference
to t: MM!EReference, ann:MM!EAnnotation{

	t.name=s.name;
	t.lowerBound = s.lowerb;
	t.upperBound = s.upperb;
	t.eType ::= s.type;
	
	ann.source="DT";
	ann.details.put("type","DTProperty");
	
	t.eAnnotations.add(ann);

	
	var parname = new MM!EAttribute;
	parname.name = "name";
	parname.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
	
	var unit = new MM!EAttribute;
	unit.name = "unit";
	unit.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
	
	var value = new MM!EAttribute;
	value.name = "value";
	value.eType= Ecore!EDataType.all.selectOne(dt|dt.name = 'EDouble');
	
	var interval = new MM!EAttribute;
	interval.name = "interval";
	interval.eType=Ecore!EDataType.all.selectOne(dt|dt.name = 'EInt');
	
	s.type.equivalent().eStructuralFeatures.add(unit);
	s.type.equivalent().eStructuralFeatures.add(value);
	s.type.equivalent().eStructuralFeatures.add(parname);
	s.type.equivalent().eStructuralFeatures.add(interval);
	
	
	s.dtclass.equivalent().eStructuralFeatures.add(t);
	
	
}


operation OrderedSet<DTClass> createRefs(){
var list:List;
for (r in self) { 
	var  ref:MM!EReference = new MM!EReference;
	ref.name=r.name;
	ref.lowerBound = r.lowerb;
	ref.upperBound = r.upperb;
	ref.eType::=r;
	ref.containment=true;
	list.add(ref);
}

return list;
}

operation Any convert(){
String.type.println();
switch(self.name){
case "_string": return Ecore!EDataType.all.selectOne(dt|dt.name = 'EString');
case "_integer": return Ecore!EDataType.all.selectOne(dt|dt.name = 'EInt');
case "_bool": return Ecore!EDataType.all.selectOne(dt|dt.name = 'EBoolean');
case "_float": return Ecore!EDataType.all.selectOne(dt|dt.name = 'EFloat');

}
}

operation digitaltwin!Reference isContainment(): Boolean{
return self.isKindOf(digitaltwin!ContainmentReference)?true:false;
}

